[
    {
        "id": 1,
        "GROUND_TRUTH": "{\"answer\":\"According to the document, to generate an RCA in an OOB script, follow these steps:\n\n1. Identify the script that needs modification. In this case, it is the auto close case scheduled job with the sys\\_id 8d5f5dfb53032300c128ddeeff7b12bd.\n2. Locate the section of the script that needs to be updated. In the script, add the following code block after line 56:\n\n```javascript\nif(grCase.hr_service.le_type) {\n    if(new sn_hr_core.hr_CaseUtils()._getActivitySetContextCases(caseId))\n        return;\n}\n```\n\n3. Make changes to the script include (with sys\\_id 24c782869f202200d9011977677fcf89) by adding a method:\n\n```javascript\n_getActivitySetContextCases: function(caseId){\n    var grContext = new GlideRecord('sn_hr_le_activity_set_context');\n    grContext.addQuery('hr_case',caseId);\n    grContext.addQuery('state','awaiting_trigger');\n    grContext.query();\n    return grContext.hasNext();\n},\n```\n\n4. Run the following background script:\n\n```javascript\nnew sn_hr_core.hr_CaseUtils()._getActivitySetContextCases('123');\n```\n\nBy following these steps, the system should generate two RCAs - one for the script include and one for the scheduled script.\",\"citations\":[{\"content\":\"According to the document, to generate an RCA in an OOB script, follow these steps:\n\n1. Identify the script that needs modification. In this case, it is the auto close case scheduled job with the sys\\_id 8d5f5dfb53032300c128ddeeff7b12bd.\n2. Locate the section of the script that needs to be updated. In the script, add the following code block after line 56:\n\n```javascript\nif(grCase.hr_service.le_type) {\n    if(new sn_hr_core.hr_CaseUtils()._getActivitySetContextCases(caseId))\n        return;\n}\n```\n\n3. Make changes to the script include (with sys\\_id 24c782869f202200d9011977677fcf89) by adding a method:\n\n```javascript\n_getActivitySetContextCases: function(caseId){\n    var grContext = new GlideRecord('sn_hr_le_activity_set_context');\n    grContext.addQuery('hr_case',caseId);\n    grContext.addQuery('state','awaiting_trigger');\n    grContext.query();\n    return grContext.hasNext();\n},\n```\n\n4. Run the following background script:\n\n```javascript\nnew sn_hr_core.hr_CaseUtils()._getActivitySetContextCases('123');\n```\n\nBy following these steps, the system should generate two RCAs - one for the script include and one for the scheduled script.\",\"citation_sources\":[{\"source_sys_id\":\"2a35e0a44726e550da8f9535126d431b\",\"source_type\":\"kb\"}]}]}",
        "CONTEXT": "\"## \n\n## Description\n\nIssue Definition: Bug in OOB Script (Schedule Job: Auto Close Case) - HRSD  \ngrContext.query(); is not being used, after adding queries.  \n  \nObserved in: Orlando Patch 4, Orlando Patch 7  \n  \n\n\n## Steps to Reproduce\n\n Steps to Reproduce:  \n1. On any OOB instance, open the below OOB scheduled script:  \n\/sysauto\\_script.do?sys\\_id=8d5f5dfb53032300c128ddeeff7b12bd&sysparm\\_record\\_target=sysauto&sysparm\\_record\\_row=1&sysparm\\_record\\_rows=6&sysparm\\_record\\_list=nameCONTAINScase%5EORDERBYname\n\n\n  \n2. In the script block, after line 56 :  \n\"grContext.query();\" is missing  \n  \n\n\n## Workaround\n\n1. Make changes to the auto close case: ( the scheduled job with sys\\_id  - 8d5f5dfb53032300c128ddeeff7b12bd) in line number 53 - 56\n\n\n`if(grCase.hr_service.le_type) {`  \n`if(new sn_hr_core.hr_CaseUtils()._getActivitySetContextCases(caseId))`  \n`return;`  \n`}`\n\n\n2. Make changes to the script include hr\\_CaseUtils  (with sys\\_id 24c782869f202200d9011977677fcf89) as this :  \nadd a method -\n\n\n`_getActivitySetContextCases: function(caseId){  \n var grContext = new GlideRecord('sn_hr_le_activity_set_context');  \n grContext.addQuery('hr_case',caseId);  \n grContext.addQuery('state','awaiting_trigger');  \n grContext.query();  \n return grContext.hasNext();  \n },`  \n3. Run the following background script:  `new sn_hr_core.hr_CaseUtils()._getActivitySetContextCases('123');`  \nThis should generate an RCA. Make sure there are two RCAs - one for the script include, and one for the scheduled script.\n\n  \n**Related Problem: PRB1442036**\"\n\n",
        "QUERY": " 'How to generate a RCA in OOB script?'"
    },
    {
        "id": 2,
        "GROUND_TRUTH": "{\"answer\":\"According to the document, integrating Conversational Integration with Microsoft Teams necessitates that the user in the Microsoft Teams tenant has one of the required roles. The roles include Global Administrator, Application Administrator, or Cloud Application Administrator in Microsoft Teams. This is because the integration process involves installing or overriding MS Teams configuration, which requires the necessary permissions granted by these roles.\",\"citations\":[{\"content\":\"According to the document, integrating Conversational Integration with Microsoft Teams necessitates that the user in the Microsoft Teams tenant has one of the required roles. The roles include Global Administrator, Application Administrator, or Cloud Application Administrator in Microsoft Teams. This is because the integration process involves installing or overriding MS Teams configuration, which requires the necessary permissions granted by these roles.\",\"citation_sources\":[{\"source_sys_id\":\"e850d111334602101c34774a7e5c7b1b\",\"source_type\":\"kb\"}]}]}",
        "CONTEXT": "\"## \n\n**Identify installation error**\n\n\n \n\n\nAfter activating Conversational Integration with Microsoft Teams users will get an option to install MS teams from messaging app integration page. During installation when the user clicks on install and if bellow error page is displayed with error code = 9, this is because the user on MS Team tenant does not have one of the required mentioned roles.\n\n\n \n\n\nPlease follow the [doc](https:\/\/docs.servicenow.com\/bundle\/quebec-now-intelligence\/page\/administer\/virtual-agent\/concept\/teams-conv-integration.html \"doc\") to know more about Conversational Integration with Microsoft Teams plugin\n\n\nHere is a [link](https:\/\/store.servicenow.com\/sn_appstore_store.do#!\/store\/application\/8be385e4776110105d7b3882a910610e\/2.0.0?sl=sh \"link\") for store app plugin for Conversational Integration with Microsoft Teams plugin\n\n\n \n\n\n![](sys_attachment.do?sys_id=4a9550e7db86f410bb4a474d13961958)\n\n\n \n\n\n**Required Roles**\n\n\nServicenow: virtual\\_agent\\_admin and external\\_app\\_install\\_admin or admin\n\n\nMicrosoft Teams administrator (one of the following): Global Administrator, Application Administrator, or Cloud Application Administrator\n\n\n \n\n\n**How to resolve the above error**\n\n\nHere is a [Microsoft document](https:\/\/docs.microsoft.com\/en-us\/microsoft-365\/admin\/add-users\/assign-admin-roles?view=o365-worldwide \"Microsoft document\") that will help to add required roles to users. Once the user is assigned one of the above roles, they should be able to install\/override MS Teams configuration.\"\n\n",
        "QUERY": " 'Why Global Administrator is required for MS team integration'"
    },
    {
        "id": 3,
        "GROUND_TRUTH": "{\"answer\":\"According to the document, there is a feature available from the Tokyo release that automates certain post-upgrade activities, such as upgrading installed applications and resolving post-upgrade skipped records. This feature is part of an out-of-the-box plugin called \"com.glide.upgrade\\_to\\_customized\". However, it's important to note that this might increase the total upgrade time as manual activities are implemented by the Upgrade Engine.\n\nThe Upgrade Plan focuses on automating tasks that are currently manual after an upgrade, including upgrading installed applications, installing new applications, resolving post-upgrade skipped records, and more. Skipped records will be captured as scope-specific app updates in the Upgrade Plan.\n\nTo address skipped records, you should review and resolve them post-upgrade. If there are no action items for a skipped configuration and there is a new version coming in the upgrade, the file will be reverted to the base version. It is recommended to address all skipped items.\n\nIf there are any items in an Error state during Upgrade validation on the CONSUMER instance, the customer can remediate the issue and reprocess the Upgrade Plan to rectify this before the Version Upgrade.\n\nIt is also important to remember that the upgrade plan is a global application that holds configuration files in their own respective scope. The upgrade plan should be installed on your CONSUMER instance before the upgrade.\n\nIf there are skipped errors appearing in the upgrade monitor after upgrading to Tokyo, it might be due to extra customizations on the CONSUMER instance that were not on the BUILDER instance. These records need to be reviewed and addressed during the upgrade.\",\"citations\":[{\"content\":\"According to the document, there is a feature available from the Tokyo release that automates certain post-upgrade activities, such as upgrading installed applications and resolving post-upgrade skipped records. This feature is part of an out-of-the-box plugin called \"com.glide.upgrade\\_to\\_customized\". However, it's important to note that this might increase the total upgrade time as manual activities are implemented by the Upgrade Engine.\n\nThe Upgrade Plan focuses on automating tasks that are currently manual after an upgrade, including upgrading installed applications, installing new applications, resolving post-upgrade skipped records, and more. Skipped records will be captured as scope-specific app updates in the Upgrade Plan.\n\nTo address skipped records, you should review and resolve them post-upgrade. If there are no action items for a skipped configuration and there is a new version coming in the upgrade, the file will be reverted to the base version. It is recommended to address all skipped items.\n\nIf there are any items in an Error state during Upgrade validation on the CONSUMER instance, the customer can remediate the issue and reprocess the Upgrade Plan to rectify this before the Version Upgrade.\n\nIt is also important to remember that the upgrade plan is a global application that holds configuration files in their own respective scope. The upgrade plan should be installed on your CONSUMER instance before the upgrade.\n\nIf there are skipped errors appearing in the upgrade monitor after upgrading to Tokyo, it might be due to extra customizations on the CONSUMER instance that were not on the BUILDER instance. These records need to be reviewed and addressed during the upgrade.\",\"citation_sources\":[{\"source_sys_id\":\"59885c0d9361c25085b672818bba10e8\",\"source_type\":\"kb\"}]}]}",
        "CONTEXT": "\"## \n\n### Details\n\nThis module will replace the below section on [Instance upgrade FAQ - Frequently Asked Questions](https:\/\/support.servicenow.com\/kb?id=kb_article_view&sysparm_article=KB0678054) from the T+ release\n\n\n[15. How to use an Update Set to capture reverted customisations made after an upgrade?](https:\/\/support.servicenow.com\/kb?id=kb_article_view&sysparm_article=KB0678054#q15)\n\n\n \n\n\nProduct documentation:- [Upgrade Plan Overview](https:\/\/docs.servicenow.com\/csh?topicname=uc-upgrade-plan.html&version=latest)\n\n\n* This feature can only be used from the Tokyo release.\n* The customer should be creating an Upgrade plan for every upgrade on the instance from X to Y\/XPatch\\* to XPatch\\*\/XPatch\\* to YPatch\\*.\n* If the customer plan to upgrade from T to U; they need to create it on their BUILDER instance once so that it can be used for all their instances going on the same upgrade patch where all other instances except the builder instance will be CONSUMER.\n* If the customer is going from UP1 to UP6; another plan should be created.\n* This feature is part of an OOB plugin that will be installed with your Tokyo upgrade  \"com.glide.upgrade\\_to\\_customized\".\n* This upgrade Plan will reduce the time and man-hours consumed for Post upgrade activities as the below-listed activities will be automated by the upgrade engine using the AppRepo feature which is already on the instance as a base feature.\n* This might increase the total Upgrade time ( as post-upgrade manual activities are implemented by the Upgrade Engine).\n\n\n \n\n\nUpgrade plan focus on automating the following which is currently a manual task after an upgrade.\n\n\n \n\n\n1. Upgrade installed applications ( Custom or Store)\n\n\n2. Install new applications ( Custom or Store)\n\n\n3. Install new Store application ( Target upgrade Release specific)\n\n\n4. Automatically review=> Resolve your Post upgrade Skipped records( these will be captured as scope specific app updates)\n\n### Additional Information\n\n## The High-Level Data flow is as follows-\n\n\n \n\n\n1. Configure your DEV instance as a BUILDER instance.\n2. Upgrade your instance (T==> TPatch\\*\/U\/V)\n3. Review and [Resolve all your Skipped](https:\/\/docs.servicenow.com\/csh?topicname=uc-process-skipped-records.html&version=latest) records ( POST upgrade)\\*\\*\\* This is very important. If there are no action items for a skipped configuration and there is a new version coming in the upgrade, the file will be reverted to the base version ( this can be revisited later). But it is recommended to address all the skipped items.\n4. Install new Plugins\/applications ( Custom or Store) if any.\n5. Upgrade Centre=> Upgrade Plan\n6. Created upgrade plan when ready ( after making necessary changes) should be published which will create an app for your AppRepo. This will create a Global Scoped Application \"Upgrade Plan  Target Version name\"\n7. Upgrade plan can be retrieved on any Consumer instance from \" My Company Applications\"\n8. Install the new version if you have made any changes to the upgrade plan. Any changes to the upgrade plan ( Refresh) will create a new version and publish Automatically. The name will be \"Upgrade Plan  Version name\". \\*\\*\\* We recommend testing this on a SUB PROD consumer instance before installing this.\n9. Review the Upgrade plan and the Related list ( Individual versions for each application). This will contain installed apps as well as custom apps. If you do not want any of these apps to be excluded from the upgrade ( please mark them inactive).Instance Administrators can compare the versions and mark them as per the organisational requirement\/development plan\n10. Create an upgrade change for your CONSUMER instance.\n11. \"Upgrade Preview\" and this will Preview the Upgrade with Upgrade Plan. Predictions will give you the count. It says how many are Automatically resolved.\n12. During upgrade, the Upgrade engine will take care of App Updates\/Commit Customisation\/Resolve Skipped post upgrade files( as you did in the BUILDER instance)\n13. Upgrade Monitor will show you the relevant information.\n\n\n \n\n\n![](\/sys_attachment.do?sys_id=fc5df7e1474f39103542f24c736d435d)\n\n\n## Points to remember\n\n\n \n\n\n1. Upgrade Plan is created as a  GLOBAL AppRepo Application with version incremented for each of Refresh( link)\n2. Upgrade plan is a GLOBAL application which hold config files which are in their own respective scope. GLOBAL application is to create\/host\/publish\/transfer\/install the config files in an easy way to consumer instances.\n3. Upgrade Plan should be installed on your CONSUMER instance before the upgrade.\n4. The upgrade plan will include all your Global customizations ( there will be a new app created for this as \"Global Customizations - Upgrade Plan\"). This app will remain on your app repository as an app and will be used for future upgrades to new versions. For every family releases the version number will be incremented.\n5. All Skipped records post-upgrade when addressed\/Resolved will be included in the sys\\_update\\_xml. These will be captured in the upgrade plan as customisations for respective Scope\/Package and will be included in Upgrade Plan\n6. This will also create applications with versions as installed on your BUILDER instance.\n7. This will create new versions for Store installed apps\/plugins if these are customised on that instance on their respective SCOPE. It will list the current version that is installed and the Customised version if available. Product doc: [Manage customizations to applications](https:\/\/docs.servicenow.com\/csh?topicname=manage-customizations-store-apps.html&version=latest)\n8. If you have multiple DEV instances publishing to AppRep and if the current BUILDER instance does not have up-to-date custom applications which were not installed ( but published) on App Repo from other DEV; this will not be included in the Upgrade Plan. It will give a warning saying there is a new version available in App Repo.\n9. The upgrade plan only contains the config. It does not contain any metadata. So if there is a Scoped app update coming in via Upgrade Plan; the metadata is going to be its customised package even though the Upgrade plan is installed as an App from AppRep.\n10. Every time you refresh the Upgrade Plan; it will automatically get published to AppRepo. We need to make sure the same version is installed on the CONSUMER instance.\n11. Soon after the Upgrade Plan is installed on the CONSUMER it will start downloading the individual components for the Upgrade Engine to Consume. These are stored in the Attachment table.\n12. During the Upgrade preview; It will list out the number of records that get auto-resolved and records that will not. You need to take action on the records which say to be reverted.  This happens if your Consumer instance has extra customisations which were not on your BUILDER instance. You can take note of these records and bring the customisations back to BUILDER and Refresh Upgrade Plan which will include these NEW customisations. Then this new version should be installed on the consumer instance before the upgrade.\n13. The upgrade plan will be consumed during the upgrade and will do the activities which are captured. These config files will be updated to their metadata on that respective SCOPE.\n14. Upgrade Plan will be considered for any Schema changes and there will be only one online alter if there is a schema change coming in via upgrade and another one on the Upgrade plan\n15. If there are any items in an Error state during Upgrade validation on the CONSUMER instance; the customer can remediate the issue and reprocess the Upgrade Plan to rectify this before the Version Upgrade. There will be a Status column that will specify the issue to remediate.\n\n\n \n\n\n## FAQ\n\n\n \n\n\n**1. Which instance should I configure as Builder?**\n\n\nYou should be making your DEV instance the builder instance. If you have multiple DEV instances; you should configure the MASTER\/MAIN DEV instance as your BUILDER instance\n\n\nBy Default all instances are marked as \"Consumer\" Driven by property glide.upgrade.plan.instance\\_type ( only available from T+)\n\n\nThese instances should stay as a Consumer instance\n\n\nTEST\n\n\nPROD.\n\n\n \n\n\nOnce the instance is configured as a BUILDER; you cannot change it to consumer and the clone preserves this setting.\n\n\n \n\n\n**2. Can I make my PROD a BUILDER instance?**\n\n\nYou should NOT  make your PROD instance a Builder instance\n\n\nThe upgrade plan is linked to each upgrade. So once there is a plan created; your Global customisations will be linked to a \"Global Customisations - Upgrade Plan\" Application. You do not want that in PROD\n\n\n \n\n\n**3. What happens to the Store application installation on the upgrade plan for which we do not have entitlement on the Consumer ( PROD)**\n\n\nEntitlement issue\/Licensing issue ( State will be Error). These will not be auto-installed, and this should be addressed manually.\n\n\nThis will be the same for MAINT-only plugins. This will be changed to Error.\n\n\n \n\n\n**4. What happens if I do not want to install an application\/update which is already on a tested upgrade plan**\n\n\nWe have the option to make individual updates Inactive before your Actual Version upgrade on the target instance. So these will be skipped.\n\n\n \n\n\n**5. Can I disable the Installed upgrade plan in case of any last-minute change of plans?**\n\n\nWe can disable the upgrade plan together. Also, there is an option to create another upgrade(Refresh) plan ( new version) and install it as an Update on the consumer before the upgrade\n\n\n \n\n\n**6. When we install the customisation via the Upgrade plan; will it leave an entry on sys\\_update\\_version and sys\\_update\\_xml?**\n\n\nIf it is a new App installation without any customisation; it will not leave an entry on sys\\_update\\* tables. If it is a Store App\/Plugin and is customised; it will have those customisation records on sys\\_update\\* tables on the consumer instance\n\n\n \n\n\n**7. Can I install a deactivated component from the Upgrade plan at a later stage on the consumer?**\n\n\nThis is not possible at the moment and it will be there from U+. This will again dependent on if there is a new version in App Repo\/was it already upgraded on the instance from App Repo\/Store.\n\n\n \n\n\n**8. What will happen to an application which is already in a newer version installed than the version coming in Upgrade Plan?**\n\n\nIf the upgrade plan is having the same or an older version; it will not be consumed during the Upgrade.\n\n\n \n\n\n**9. How can I find out if the Upgrade plan was executed?**\n\n\nThis will be listed on the sys\\_upgrade\\_history\\_log table\" Auto resolved from\" column.\n\n\n \n\n\n**10. Is this available for Self Hosted customers?**\n\n\nIf the self-hosted customer has AppRepo connectivity they can utilise this feature.\n\n\n \n\n\n**11. What if there is a plugin\/app dependency on an app\/plugin on the upgrade plan?** \n\n\nThe upgrade plan will not look into the dependencies and auto-install them. The dependent plugins should be a part of the Upgrade Plan\n\n\n \n\n\n**12. Will this increase the time of the total upgrade?**\n\n\nThis will increase the Upgrade change duration and increase the time to upgrade, but post-upgrade activities are managed by the Upgrade engine automatically.\n\n\n \n\n\n**13. Will the Upgrade Plan capture the Update-sets?**\n\n\nThe upgrade plan does not capture all the updates made by the customer. While building we pick the skipped records and corresponding scopes will be included in the plan along with the customer installed\/upgraded\/published applications.\n\n\n  \nWe do not have any support for update set commits to capture in the upgrade plan at the moment. Post-upgrade update-set commits will be manual.\n\n\n \n\n\n**14. Can I uninstall the Upgrade plan after WAR upgrade?**\n\n\nFrom the instance where the Upgrade Plan is installed, it can be uninstalled if the instance is not yet upgraded(WAR version).\n\n\nFrom the instance where the Upgrade plan is installed and WAR upgraded, It cannot be uninstalled as the Upgrade plan is a bunch of configuration Records that will be copied over to the instance during upgrade Plan installation as a Global App containing files in their respective scope. These will be consumed when the Upgrade happens. So, during the upgrade these configs that came over via the Upgrade plan would have been already consumed and changes made to sys\\_metadata of those respective updates in their respective scopes. An uninstallation on the upgrade plan after the WAR upgrade will not help here as the configuration record is already updated with\/after the upgrade and this might mess up the instance if attempted.\n\n\n \n\n\n**15. Why there are multiple \\*global\\* scope entries on my sys\\_scope\/sys\\_app table on the builder instance?**\n\n\n \n\n\n \n\n\nThis is expected behaviour as the Upgrade plan creates multiple \"global\" apps with the same sys\\_scope(global) but with different sys\\_id's. The scope will remain global even though there are OOB \"global\" records linked to these newly created Global scopes.\n\n\n \n\n\n![](\/sys_attachment.do?sys_id=855df7e1474f39103542f24c736d4399 \"Screenshot 2023-10-26 at 1.42.12 pm.png\")\n\n\n \n\n\n**16. Why OOB \"global\" records are linked to \"Global Customizations  Upgrade Plan\" (Application) on my builder and consumer instance?**\n\n\n \n\n\nThis is an expected behaviour where this is a new \"global\" scope created with the upgrade plan and any global updates that get added to the upgrade plan will be linked to the Application as \"Global Customizations  Upgrade Plan\". This is a cosmetic change and will not affect the functionality of the instance as the records will stay \"global\"\n\n\n \n\n\n \n\n\n**17. There is a new App \"Global Customizations  Upgrade Plan\" on the \"Not installed\" section of my company application list.**\n\n\n \n\n\nThis is an expected behaviour, and this will be auto-installed when the Upgrade Plan is consumed during the Upgrade. You do not have to install manually, and you only need to install \"Upgrade Plan \\*RELEASE VERSION\\*\n\n\n \n\n\n![](\/sys_attachment.do?sys_id=855df7e1474f39103542f24c736d4363 \"Screenshot 2023-10-26 at 1.27.10 pm.png\")\n\n\n \n\n\n \n\n\n**18. The WAR version for which the Upgrade plan was created on the builder instance is not available for selection on the Consumer instance Upgrade Change.**\n\n\n \n\n\nIf there is a mismatch in the WAR version name on the upgrade plan the upgrade plan will not be consumed.\n\n\n \n\n\nEg: XP7HF1 upgrade plan WILL NOT be consumed during a XP7HF1a upgrade.\n\n\n \n\n\n \n\n\nWhen a new Patch\/HotFix#\/HotFix #\\* gets released to remediate security issues, the old version will be taken out of the available list for Upgrade selection. If the Upgrade plan was already published from the OLD version; the remediation steps will be as follows:-\n\n\n \n\n\nOn the builder version where the Upgrade plan was published; please upgrade to the new available Patch\/Hotfix version via the NowSupport change.\n\n\nPublish the new Upgrade plan once it is installed with the new WAR version.\n\n\nInstall the new upgrade plan on the consumer instance.\n\n\n \n\n\n**19. What issues can be anticipated if the upgrade plan was not consumed during an upgrade?**\n\n\n \n\n\nIf it is not consumed, you can have sys\\_scope issues when trying to commit Global update-sets captured from the builder version on the consumer instance as the new \\*global\\* sys\\_scope records (Point 16) will not be committed as the Upgrade plan was not consumed which can give you preview errors for sys\\_scope as it is not found on the consumer.\n\n\n \n\n\n**20. Why is there a customised version for the OOB\/installed apps\/plugins on the Upgrade plan even though we havent made any customisation?**\n\n\n \n\n\nWhat the Upgrade plan does is package all the previous customisations you had on the instance and make it into a version. So these records you see there will not be a recent one and they might have been updated before(maybe years back). The upgrade plan basically packages it as a 1.0.\\* version so that it will be hosted in AppRepo in its individual scope.\n\n\n \n\n\nThe next upgrade plan will have an incremented version from the current one.\n\n\nYou can use this feature to transfer updates to an OOB module\/app\/plugin by Publishing them separately to AppRepo irrespective of whether it is linked to the Upgrade plan by not using the update-set feature. If you install them as packaged versions; uninstalling them will be easy instead of backing up an update set.\n\n\n![](\/sys_attachment.do?sys_id=895df7e1474f39103542f24c736d439d \"Screenshot 2023-11-02 at 1.58.55 pm.png\")\n\n\n \n\n\n**21. Why does the customisation record show as Inserted\/Unchanged in sys\\_upgrade history disposition?**\n\n\n \n\n\nWhen the upgrade plan is consumed during the upgrade; the customisations packaged for OOB\/Store Apps\/Plugins will be added to the instance sys\\_update\\_version linked to the new Packaged version of the application.\n\n\nSo if it was previously brought over by an update-set; there will be a new entry on sys\\_update\\_version and it will be the same file, but with a new entry. This should not be confu...\"\n\n",
        "QUERY": " 'Why do I have skipped errors in the upgrade monitor after upgrade to tokyo'"
    },
    {
        "id": 4,
        "GROUND_TRUTH": "{\"answer\":\"According to the provided document, when a demand is deleted, all data related to the demand such as risks, demand tasks, requirements, and decisions are deleted. However, the stakeholders associated with the demand are not deleted from the Stakeholder Register table. Furthermore, if a project has already been created from a demand, its reference is removed from the project along with the data related to the demand. But, the project itself is not deleted from the database. Therefore, based on the information provided in the document, when a project is deleted from a demand, not all information related to the demand is deleted, as the stakeholders and the project itself are retained in the database.\",\"citations\":[{\"content\":\"According to the provided document, when a demand is deleted, all data related to the demand such as risks, demand tasks, requirements, and decisions are deleted. However, the stakeholders associated with the demand are not deleted from the Stakeholder Register table. Furthermore, if a project has already been created from a demand, its reference is removed from the project along with the data related to the demand. But, the project itself is not deleted from the database. Therefore, based on the information provided in the document, when a project is deleted from a demand, not all information related to the demand is deleted, as the stakeholders and the project itself are retained in the database.\",\"citation_sources\":[{\"source_sys_id\":\"2bfb1bd7475039501b1ed881736d43dd\",\"source_type\":\"kb\"}]}]}",
        "CONTEXT": "\"## \n\nDelete demands\n[Strategic Portfolio Management](..\/..\/..\/product\/it-business-management\/reference\/r_ITBusinessManagement.html \"Align work with business goals to deliver products and services in a way that supports your strategic priorities. ServiceNow Strategic Portfolio Management (SPM, formerly IT Business Management, enables you to use digital transformation to drive more customer value faster. Plan, deliver, and track value across different methodologies.\") > [Project Portfolio Management](..\/..\/..\/product\/project-portfolio-suite\/concept\/c_ProjectPortfolioSuite.html \"Project Portfolio Management provides a simplified, team-oriented approach to Project Portfolio Management and IT development by combining several individual applications.\") > [Demand Management](..\/..\/..\/product\/planning-and-policy\/concept\/c_DemandManagement.html \"The Demand Management application consists of tools for capturing, centralizing, and assessing strategic and operational demands. It also provides a single location for managing all the demand information.\") > \n# Delete demands\n\n\nDemands can be deleted only while in the Pending state.\n\n\n\nRole required: it\\_demand\\_manager or it\\_demand\\_user\n\n\n\n\nWhen you delete a demand, all data related to the demand, such as risks, demand\n tasks, requirements, and decisions are deleted, but the stakeholders are not deleted\n from the Stakeholder Register [dmn\\_stakeholders\\_register] table.\n\n\nIf a project is already created from a demand, its reference is removed from the\n project along with the data related to the demand, however, the project is not\n deleted from the database.\n\n\nTo delete a demand:\n\n\n\n1. Navigate to All > Demand > Demands > All.\n2. Do:\n\t* Click the demand to open the demand form and then click\n\t Delete.\n\t* Select the check box next to the demand and then select\n\t Delete from the Actions\n\t choice list.\n\n\n\n\n\n**Parent Topic:** [Editing demands](..\/..\/..\/product\/planning-and-policy\/concept\/editing-demands.html \"Users with the demand manager role can view and modify demands using the Demand Management application.\")\"\n\n",
        "QUERY": " 'when project is deleted from a demand all information is deleted'"
    },
    {
        "id": 5,
        "GROUND_TRUTH": "{\"answer\":\"To configure the presence state for the WhatsApp service channel in Advanced Work Assignment, follow these steps:\n\n1. Navigate to Advanced Work Assignment > Settings > Presence States.\n2. In the Name column of the Presence States list, click an existing state.\n3. In the Apply to groups section of the Presence State form, click the add icon (>) to move the Agent WhatsApp Group from the Available column to the Selected column.\n4. Click Update.\n\nThis will configure the agent presence state for the WhatsApp service channel in Advanced Work Assignment.\",\"citations\":[{\"content\":\"To configure the presence state for the WhatsApp service channel in Advanced Work Assignment, follow these steps:\n\n1. Navigate to Advanced Work Assignment > Settings > Presence States.\n2. In the Name column of the Presence States list, click an existing state.\n3. In the Apply to groups section of the Presence State form, click the add icon (>) to move the Agent WhatsApp Group from the Available column to the Selected column.\n4. Click Update.\n\nThis will configure the agent presence state for the WhatsApp service channel in Advanced Work Assignment.\",\"citation_sources\":[{\"source_sys_id\":\"781a0b9f47d4f5501b1ed881736d43e5\",\"source_type\":\"kb\"}]}]}",
        "CONTEXT": "\"## \n\nTransfer WhatsApp chat conversations to live agents\n# Transfer WhatsApp chat conversations to live agents\n\n\nConfigure the Advanced Work Assignment application to transfer a WhatsApp chat conversation initiated by a requester to a live\n agent.\n\n\nYour administrator must have completed the following tasks:* [Install Conversational Integration with WhatsApp (powered by Twilio)](messg-whatsapp-install.html \"Install the Conversational Integration with WhatsApp (powered by Twilio) so that your business can interact with requesters on the WhatsApp app. The application includes demo data and installs related ServiceNow Store applications and plugins if they are not already installed.\").\n* [Activate Advanced Work\n Assignment](..\/..\/advanced-work-assignment\/task\/awa-activate.html \"You can activate the Advanced Work Assignment plugin (com.glide.awa) if you have the admin role.\").\n* Set the application scope to Conversational Integration with WhatsApp (powered by Twilio)\n using the application picker. For more information, see [Application\n picker](..\/build\/applications\/concept\/c_ApplicationPicker.dita\/c_ApplicationPicker.html).\n* Activate the Conversational Messaging plugin (com.glide.messaging.awa). For more\n information, see [Activate Conversational Messaging](activate-messaging-actions.html \"You can activate the Conversational Messaging plugin (com.glide.messaging.awa) if you have the admin role.\").\n\n\nRole required: admin\n\n\n\n\n1. Enable the WhatsApp service channel.\n\t1. Navigate to Advanced Work Assignment > Settings > Service Channels.\n\t2. In the Name column of the Queues list, search\n\t for WhatsApp.\n\t3. Click WhatsApp.\n\t4. On the Service Channel form, select the Active\n\t check box.\n\t5. Click Update.For more information, see [Service\n channels](..\/..\/advanced-work-assignment\/concept\/awa-service-channels.html \"Provide customer support by automatically routing incoming work to agents through service channels.\").\n2. Automatically route work items for WhatsApp chat conversations\n to agents by configuring the queue for the WhatsApp service\n channel.\n\t1. Navigate to Advanced Work Assignment > Settings > Queues.\n\t2. In the Name column of the Queues list, search\n\t for Agent WhatsApp Queue.\n\t3. Click Agent WhatsApp Queue.\n\t4. On the Queue form, select the Active check\n\t box.\n\t5. Click Update.\nNote: By default, the WhatsApp - Most Capacity assignment\n rule is associated with the Agent WhatsApp Queue. You can create another\n assignment rule and associate it with the queue. For more information, see\n [Configure agent\n assignment rules](..\/..\/advanced-work-assignment\/task\/awa-create-assignment-rule.html \"Set the Advanced Work Assignment criteria for assigning work items to agents. Choose the assignment rule that considers the agent with the most capacity or the agent who has gone the longest without work. Establish the settings for the auto-assign handling, reject handling, and skill handling related lists.\") and [Work item\n queues](..\/..\/advanced-work-assignment\/reference\/awa-queues.html \"In Advanced Work Assignment, queues store a specific type of work item for a service channel.\").\n3. Configure agent presence states for the WhatsApp service\n channel.\n\t1. Navigate to Advanced Work Assignment > Settings > Presence States.\n\t2. In the Name column of the Presence States list,\n\t click an existing state.\n\t3. In the Apply to groups section of the Presence State form, click the\n\t add icon (>) to move the Agent WhatsApp Group\n\t group from the Available column to the\n\t Selected column.\n\t\n\tNote: You can ignore this step if you have selected the Apply\n\t to all groups check box.\n\t4. Click Update.For more information, see [Configure agent presence\n states](..\/..\/advanced-work-assignment\/task\/awa-configure-agent-presence.html \"Create or modify the availability states that agents use to indicate whether they can receive work or are offline or away. Agents set these states in their Workspace Inbox.\").\"\n\n",
        "QUERY": " 'whatsapp service channel in presence state'"
    }
]